// Attendre que le contenu du DOM soit compl√®tement charg√© avant d'ex√©cuter le code
document.addEventListener('DOMContentLoaded', () => {
    
    // Charger les param√®tres du jeu depuis localStorage, ou utiliser les valeurs par d√©faut
    const gameSettings = JSON.parse(localStorage.getItem("gameSettings")) || { theme: "legumes", size: "4" };
    
    // D√©finir les diff√©rents th√®mes disponibles pour le jeu
    const themes = {
        legumes: generateTheme('legumes', 6, '.svg'),
        food: generateTheme('food', 6, '.png'),
        dinoName: generateTheme('dinoName', 10, '.jpg'),
        dino: generateTheme('dino', 10, '.jpg'),
        chiens: generateTheme('chiens', 23, '.webp'),
        animauxDom: generateTheme('animauxDom', 10, '.jpg'),
        animauxAnime: generateTheme('animauxAnimes', 8, '.webp'),
        animaux: generateTheme('animaux', 27, '.webp'),
        alphabet: generateTheme('alphabet', 26, '.png'),
    };
  
    // Fonction pour g√©n√©rer un tableau d'objets repr√©sentant les cartes d'un th√®me
    function generateTheme(theme, count, extension) {
        let basePath = `ressources/${theme}/`; // Chemin des images
        return Array.from({ length: count }, (_, i) => ({
            name: `${theme}${i + 1}`,
            img: `${basePath}${i + 1}${extension}`
        }));
    }
  
    // Calculer la taille du tableau de cartes en fonction des param√®tres du jeu
    const gridSize = parseInt(gameSettings.size);
    const maxPairs = (gridSize * gridSize) / 2; // Nombre maximum de paires de cartes (1 carte pour chaque paire)
    
    // Cr√©er le tableau de cartes √† partir du th√®me s√©lectionn√©
    let cardArray = [...themes[gameSettings.theme]];
    cardArray = cardArray.slice(0, Math.min(maxPairs, cardArray.length)); // Limiter √† la taille maximale des paires
    cardArray = [...cardArray, ...cardArray].sort(() => 0.5 - Math.random()); // M√©langer les cartes

    // S√©lectionner le conteneur du jeu
    const grid = document.querySelector('.grid');
    
    // D√©clarer les variables n√©cessaires pour g√©rer l'√©tat du jeu
    let cardsChosen = [], cardsChosenId = [], cardsWon = [];
    let score = 100;
    let timeLeft = 60;
    let timerInterval;
    let gameStarted = false;
    let gameWon = false;  // Ajout√© pour savoir si le jeu a √©t√© gagn√©
  
    const timerElement = document.getElementById('timer');
    const scoreElement = document.getElementById('score');
  
    // Fonction pour ajuster la taille de la grille selon le nombre de colonnes
    function setGridSize(size) {
        grid.style.gridTemplateColumns = `repeat(${size}, auto)`; // Modifier le style CSS pour la grille
    }
  
    // Fonction pour cr√©er et afficher la grille de jeu avec des cartes
    function createBoard() {
        grid.innerHTML = ''; // Effacer la grille existante
        setGridSize(gameSettings.size); // D√©finir la taille de la grille
        cardArray.forEach((card, index) => {
            const cardElement = document.createElement('img'); // Cr√©er un √©l√©ment image pour chaque carte
            cardElement.setAttribute('src', 'ressources/back.png'); // Image arri√®re de la carte
            cardElement.setAttribute('data-id', index); // Attribuer un identifiant unique √† chaque carte
            cardElement.addEventListener('click', flipCard); // Ajouter un √©v√©nement au clic pour retourner la carte
            grid.appendChild(cardElement); // Ajouter l'image √† la grille
        });
    }
  
    // Fonction pour d√©marrer le chronom√®tre lorsque le jeu commence
    function startTimer() {
        if (!gameStarted) { // Si le jeu n'a pas encore commenc√©
            gameStarted = true; // Marquer que le jeu a commenc√©
            timerInterval = setInterval(() => { // D√©marrer l'intervalle du chronom√®tre
                timeLeft--; // R√©duire le temps restant
                timerElement.textContent = `Temps: ${timeLeft}s`; // Mettre √† jour l'affichage du temps
                if (timeLeft <= 0) { // Si le temps est √©coul√©
                    clearInterval(timerInterval); // Arr√™ter le chronom√®tre
                    showVictoryScreen(false); // Afficher l'√©cran de victoire (perdu)
                }
            }, 1000); // Mise √† jour chaque seconde
        }
    }
  
    // Fonction qui g√®re le retournement des cartes lorsque l'on clique dessus
    function flipCard() {
        if (cardsChosen.length >= 2) return; // Ne pas pouvoir s√©lectionner plus de 2 cartes √† la fois
        let cardId = this.getAttribute('data-id'); // Obtenir l'ID de la carte

        if (cardsChosenId.includes(cardId)) return; // Ne pas retourner la m√™me carte plusieurs fois

        cardsChosen.push(cardArray[cardId].name); // Ajouter le nom de la carte √† la s√©lection
        cardsChosenId.push(cardId); // Ajouter l'ID de la carte √† la liste des cartes s√©lectionn√©es
        this.setAttribute('src', cardArray[cardId].img); // Afficher l'image de la carte
        this.classList.add('flip'); // Ajouter une classe CSS pour la retourner

        if (!gameStarted) startTimer(); // D√©marrer le chronom√®tre si ce n'est pas encore fait

        if (cardsChosen.length === 2) setTimeout(checkForMatch, 500); // V√©rifier les cartes apr√®s 500ms
    }
  
    // Fonction pour v√©rifier si les deux cartes s√©lectionn√©es forment une paire
    function checkForMatch() {
        const cards = document.querySelectorAll('.grid img'); // S√©lectionner toutes les images de la grille
        const [optionOneId, optionTwoId] = cardsChosenId; // R√©cup√©rer les ID des deux cartes s√©lectionn√©es
  
        // Si les deux cartes sont les m√™mes
        if (optionOneId === optionTwoId) {
            createPopup('Vous avez cliqu√© sur la m√™me image !'); // Afficher un message d'erreur
        } else if (cardsChosen[0] === cardsChosen[1]) {
            createPopup('Vous avez trouv√© une paire !'); // Afficher un message de r√©ussite
            cards[optionOneId].setAttribute('src', 'ressources/white.png'); // Marquer les cartes comme trouv√©es
            cards[optionTwoId].setAttribute('src', 'ressources/white.png');
            cards[optionOneId].removeEventListener('click', flipCard); // D√©sactiver l'√©couteur de clic sur ces cartes
            cards[optionTwoId].removeEventListener('click', flipCard);
            cardsWon.push(cardsChosen[0]); // Ajouter la paire trouv√©e √† la liste des cartes gagn√©es
            score += 20; // Ajouter des points pour une paire trouv√©e
            scoreElement.textContent = `Score: ${score}`; // Mettre √† jour l'affichage du score
        } else {
            createPopup('Loup√© !'); // Afficher un message d'√©chec
            setTimeout(() => { // R√©initialiser les cartes apr√®s un court d√©lai
                cards[optionOneId].setAttribute('src', 'ressources/back.png');
                cards[optionTwoId].setAttribute('src', 'ressources/back.png');
            }, 500);
            score -= 10; // Enlever des points pour une mauvaise tentative
            scoreElement.textContent = `Score: ${score}`; // Mettre √† jour l'affichage du score
        }

        // R√©initialiser les cartes s√©lectionn√©es
        cardsChosen = [];
        cardsChosenId = [];

        // Si toutes les cartes ont √©t√© trouv√©es, afficher l'√©cran de victoire
        if (cardsWon.length === cardArray.length / 2) {
            clearInterval(timerInterval); // Arr√™ter le chronom√®tre
            gameWon = true;  // Marquer le jeu comme gagn√©
            showVictoryScreen(true); // Afficher l'√©cran de victoire
        }
    }
  
    // Fonction pour afficher un message contextuel
    function createPopup(message) {
        const popup = document.createElement('div'); // Cr√©er un √©l√©ment pour le pop-up
        popup.className = 'popup'; // Ajouter une classe CSS pour le style
        popup.textContent = message; // Ajouter le message √† afficher
        document.body.appendChild(popup); // Ajouter le pop-up au corps du document
        setTimeout(() => popup.remove(), 2000); // Supprimer le pop-up apr√®s 2 secondes
    }
  
    // Fonction pour afficher l'√©cran de victoire (ou de d√©faite)
    function showVictoryScreen(isWin) {
        const victoryScreen = document.createElement('div');
        victoryScreen.className = 'victory-screen';
  
        const connectedUser = JSON.parse(localStorage.getItem('connectedUser'));
        const playerName = connectedUser ? connectedUser.login : "Anonyme";
        const playerScore = score;
        const rank = getRank();
  
        // HTML dynamique pour afficher les informations du joueur et le r√©sultat du jeu
        let contentHTML = `
            <div class="victory-content">
                <h2>${isWin ? 'üéâ Bravo ! üéâ' : '‚è≥ Temps √©coul√© ! üò°'}</h2>
                ${isWin ? `
                    <table>
                        <tr><td>Pseudo :</td><td>${playerName}</td></tr>
                        <tr><td>Score :</td><td>${playerScore}</td></tr>
                        <tr><td>Taille :</td><td>${gameSettings.size}</td></tr>
                        <tr><td>Th√®me :</td><td>${gameSettings.theme}</td></tr>
                        <tr><td>Date :</td><td>${new Date().toLocaleString()}</td></tr>
                        ${rank !== null ? `<tr><td>Rang :</td><td>${rank}</td></tr>` : ''}
                    </table>
                    <button id="restart">Rejouer</button>
                ` : `
                    <p>‚è≥ Temps √©coul√© ! Votre score ne sera pas enregistr√©. üò°</p>
                    <button id="restart">Rejouer</button>
                `}
            </div>
        `;
      
        victoryScreen.innerHTML = contentHTML;
        document.body.appendChild(victoryScreen);
  
        document.getElementById('restart').addEventListener('click', () => {
            document.body.removeChild(victoryScreen); // Enlever l'√©cran de victoire
            resetGame(); // R√©initialiser le jeu
        });
  
        if (isWin) {
            saveScore(); // Enregistrer le score si le joueur a gagn√©
        }
    }
  
    // Fonction pour obtenir le rang du joueur parmi les meilleurs scores
    function getRank() {
        let connectedUser = JSON.parse(localStorage.getItem('connectedUser'));
        if (!connectedUser) return null;

        let playerScore = score;
        let bestScores = JSON.parse(localStorage.getItem('bestScores')) || [];
        bestScores.sort((a, b) => b.score - a.score); // Trier les scores par ordre d√©croissant
  
        for (let i = 0; i < bestScores.length; i++) {
            if (bestScores[i].name === connectedUser.login && bestScores[i].score === playerScore) {
                return i + 1; // Renvoyer le rang du joueur
            }
        }
        return null; // Si aucun rang n'est trouv√©
    }
  
    // Fonction pour enregistrer le score dans localStorage
    function saveScore() {
        let connectedUser = JSON.parse(localStorage.getItem('connectedUser'));
        let playerName = connectedUser ? connectedUser.login : "Anonyme";
        let bestScores = JSON.parse(localStorage.getItem("bestScores")) || [];
        bestScores.push({ name: playerName, score: score });
        bestScores.sort((a, b) => b.score - a.score);
        bestScores = bestScores.slice(0, 10); // Garder seulement les 10 meilleurs scores
        localStorage.setItem("bestScores", JSON.stringify(bestScores));
    }
  
    // Fonction pour r√©initialiser le jeu
    function resetGame() {
        cardsChosen = [];
        cardsChosenId = [];
        cardsWon = [];
        score = 100;
        timeLeft = 60;
        scoreElement.textContent = `Score: ${score}`;
        timerElement.textContent = `Temps: ${timeLeft}s`;
        createBoard(); // Re-cr√©er la grille avec les cartes m√©lang√©es
        gameStarted = false;
        gameWon = false; // R√©initialiser l'√©tat de victoire
        clearInterval(timerInterval); // Arr√™ter le timer avant de red√©marrer
    }
  
    // √âcouter la touche "Espace" pour r√©initialiser le jeu
    document.addEventListener('keydown', (event) => {
        if (event.key === ' ' || event.code === 'Space') {
            if (gameWon) {
                document.body.querySelector('.victory-screen')?.remove(); // Supprimer la fen√™tre de victoire si le jeu est gagn√©
            }
            resetGame(); // R√©initialiser le jeu
        }
    });
  
    createBoard(); // Cr√©er la grille de jeu au d√©part
});
